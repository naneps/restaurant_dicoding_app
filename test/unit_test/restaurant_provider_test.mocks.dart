// Mocks generated by Mockito 5.4.5 from annotations
// in restaurant_dicoding_app/test/unit_test/restaurant_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:restaurant_dicoding_app/models/restaurant.model.dart' as _i6;
import 'package:restaurant_dicoding_app/repositories/restaurant_repository.dart'
    as _i4;
import 'package:restaurant_dicoding_app/services/db/db_service.dart' as _i3;
import 'package:restaurant_dicoding_app/services/restaurant_favorite_service.dart'
    as _i7;
import 'package:restaurant_dicoding_app/services/restaurant_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantService_0 extends _i1.SmartFake
    implements _i2.RestaurantService {
  _FakeRestaurantService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i4.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestaurantService get service =>
      (super.noSuchMethod(
            Invocation.getter(#service),
            returnValue: _FakeRestaurantService_0(
              this,
              Invocation.getter(#service),
            ),
          )
          as _i2.RestaurantService);

  @override
  set service(_i2.RestaurantService? _service) => super.noSuchMethod(
    Invocation.setter(#service, _service),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> addReview({
    required String? id,
    dynamic name,
    dynamic review,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addReview, [], {
              #id: id,
              #name: name,
              #review: review,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i6.RestaurantModel?> getRestaurant(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurant, [id]),
            returnValue: _i5.Future<_i6.RestaurantModel?>.value(),
          )
          as _i5.Future<_i6.RestaurantModel?>);

  @override
  _i5.Future<List<_i6.RestaurantModel>?> getRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurants, []),
            returnValue: _i5.Future<List<_i6.RestaurantModel>?>.value(),
          )
          as _i5.Future<List<_i6.RestaurantModel>?>);

  @override
  _i5.Future<List<_i6.RestaurantModel>?> searchRestaurants(String? value) =>
      (super.noSuchMethod(
            Invocation.method(#searchRestaurants, [value]),
            returnValue: _i5.Future<List<_i6.RestaurantModel>?>.value(),
          )
          as _i5.Future<List<_i6.RestaurantModel>?>);
}

/// A class which mocks [RestaurantFavoriteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantFavoriteService extends _i1.Mock
    implements _i7.RestaurantFavoriteService {
  MockRestaurantFavoriteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get databaseName =>
      (super.noSuchMethod(
            Invocation.getter(#databaseName),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#databaseName),
            ),
          )
          as String);

  @override
  int get databaseVersion =>
      (super.noSuchMethod(Invocation.getter(#databaseVersion), returnValue: 0)
          as int);

  @override
  _i3.Database get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _FakeDatabase_1(this, Invocation.getter(#database)),
          )
          as _i3.Database);

  @override
  _i5.Future<void> deleteFavorite(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFavorite, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i6.RestaurantModel?> getFavoriteById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteById, [id]),
            returnValue: _i5.Future<_i6.RestaurantModel?>.value(),
          )
          as _i5.Future<_i6.RestaurantModel?>);

  @override
  _i5.Future<List<_i6.RestaurantModel>> getFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#getFavorites, []),
            returnValue: _i5.Future<List<_i6.RestaurantModel>>.value(
              <_i6.RestaurantModel>[],
            ),
          )
          as _i5.Future<List<_i6.RestaurantModel>>);

  @override
  _i5.Future<void> insertFavorite(_i6.RestaurantModel? restaurant) =>
      (super.noSuchMethod(
            Invocation.method(#insertFavorite, [restaurant]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isFavorite(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> onCreate(_i3.Database? db, int? version) =>
      (super.noSuchMethod(
            Invocation.method(#onCreate, [db, version]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> createTable(_i3.Database? db, _i3.Table? table) =>
      (super.noSuchMethod(
            Invocation.method(#createTable, [db, table]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int> delete(
    String? tableName, {
    String? where,
    List<dynamic>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [tableName],
              {#where: where, #whereArgs: whereArgs},
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.Database> initDatabase() =>
      (super.noSuchMethod(
            Invocation.method(#initDatabase, []),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.method(#initDatabase, [])),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  _i5.Future<int> insert(String? tableName, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#insert, [tableName, data]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<bool> isTableExists(String? tableName) =>
      (super.noSuchMethod(
            Invocation.method(#isTableExists, [tableName]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<Map<String, dynamic>>> query(
    String? tableName, {
    String? where,
    List<dynamic>? whereArgs,
    String? orderBy,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [tableName],
              {
                #where: where,
                #whereArgs: whereArgs,
                #orderBy: orderBy,
                #limit: limit,
              },
            ),
            returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<int> update(
    String? tableName,
    Map<String, dynamic>? data, {
    String? where,
    List<dynamic>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #update,
              [tableName, data],
              {#where: where, #whereArgs: whereArgs},
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);
}
