// Mocks generated by Mockito 5.4.5 from annotations
// in restaurant_dicoding_app/test/integration_test/restaurant_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:restaurant_dicoding_app/models/restaurant.model.dart' as _i9;
import 'package:restaurant_dicoding_app/providers/restaurant.provider.dart'
    as _i5;
import 'package:restaurant_dicoding_app/providers/states/restaurant_state.dart'
    as _i6;
import 'package:restaurant_dicoding_app/repositories/restaurant_repository.dart'
    as _i3;
import 'package:restaurant_dicoding_app/services/restaurant_favorite_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantFavoriteService_0 extends _i1.SmartFake
    implements _i2.RestaurantFavoriteService {
  _FakeRestaurantFavoriteService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRestaurantRepository_1 extends _i1.SmartFake
    implements _i3.RestaurantRepository {
  _FakeRestaurantRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTextEditingController_2 extends _i1.SmartFake
    implements _i4.TextEditingController {
  _FakeTextEditingController_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGlobalKey_3<T extends _i4.State<_i4.StatefulWidget>>
    extends _i1.SmartFake
    implements _i4.GlobalKey<T> {
  _FakeGlobalKey_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RestaurantProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantProvider extends _i1.Mock
    implements _i5.RestaurantProvider {
  MockRestaurantProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestaurantFavoriteService get favoriteService =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteService),
            returnValue: _FakeRestaurantFavoriteService_0(
              this,
              Invocation.getter(#favoriteService),
            ),
          )
          as _i2.RestaurantFavoriteService);

  @override
  _i3.RestaurantRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeRestaurantRepository_1(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i3.RestaurantRepository);

  @override
  set repo(_i3.RestaurantRepository? _repo) => super.noSuchMethod(
    Invocation.setter(#repo, _repo),
    returnValueForMissingStub: null,
  );

  @override
  _i4.TextEditingController get searchController =>
      (super.noSuchMethod(
            Invocation.getter(#searchController),
            returnValue: _FakeTextEditingController_2(
              this,
              Invocation.getter(#searchController),
            ),
          )
          as _i4.TextEditingController);

  @override
  set searchController(_i4.TextEditingController? _searchController) =>
      super.noSuchMethod(
        Invocation.setter(#searchController, _searchController),
        returnValueForMissingStub: null,
      );

  @override
  _i4.GlobalKey<_i4.FormState> get formKey =>
      (super.noSuchMethod(
            Invocation.getter(#formKey),
            returnValue: _FakeGlobalKey_3<_i4.FormState>(
              this,
              Invocation.getter(#formKey),
            ),
          )
          as _i4.GlobalKey<_i4.FormState>);

  @override
  bool get isSearching =>
      (super.noSuchMethod(Invocation.getter(#isSearching), returnValue: false)
          as bool);

  @override
  _i6.RestaurantState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i7.dummyValue<_i6.RestaurantState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.RestaurantState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> getRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurants, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void searchRestaurants(String? value) => super.noSuchMethod(
    Invocation.method(#searchRestaurants, [value]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> toggleFavorite(_i9.RestaurantModel? restaurant) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [restaurant]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RestaurantLoadedState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantLoadedState extends _i1.Mock
    implements _i6.RestaurantLoadedState {
  MockRestaurantLoadedState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.RestaurantModel> get restaurants =>
      (super.noSuchMethod(
            Invocation.getter(#restaurants),
            returnValue: <_i9.RestaurantModel>[],
          )
          as List<_i9.RestaurantModel>);
}

/// A class which mocks [RestaurantEmptyState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantEmptyState extends _i1.Mock
    implements _i6.RestaurantEmptyState {
  MockRestaurantEmptyState() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [RestaurantErrorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantErrorState extends _i1.Mock
    implements _i6.RestaurantErrorState {
  MockRestaurantErrorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get errorMessage =>
      (super.noSuchMethod(
            Invocation.getter(#errorMessage),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#errorMessage),
            ),
          )
          as String);
}
